{"version":3,"sources":["../src/WalletDialog.tsx","../src/useWalletDialog.tsx","../src/WalletListItem.tsx","../src/WalletIcon.tsx","../src/WalletMultiButton.tsx","../src/WalletDialogProvider.tsx"],"names":["useCallback","useMemo","useState","Modal","ModalContent","ModalBody","ModalHeader","ModalOverlay","List","ListItem","Button","Collapse","Icon","WalletReadyState","useWallet","ChevronsDownUpIcon","ChevronsUpDownIcon","createContext","useContext","WalletDialogContext","useWalletDialog","Image","jsx","WalletIcon","wallet","props","WalletListItem","onClick","Fragment","jsxs","WalletDialog","title","featuredWallets","wallets","select","isOpen","setOpen","expanded","setExpanded","featured","more","installed","loadable","notDetected","orderedWallets","handleWalletClick","event","walletName","handleExpandClick","WalletMultiButton","children","disabled","publicKey","connected","connecting","connect","disconnect","base58","content","connectWalletContent","WalletDialogProvider"],"mappings":"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","sourcesContent":["import React, {\n  FC,\n  SyntheticEvent,\n  useCallback,\n  useMemo,\n  useState,\n} from 'react';\nimport {\n  Modal,\n  ModalContent,\n  ModalBody,\n  ModalHeader,\n  ModalOverlay,\n  ModalProps,\n  List,\n  ListItem,\n  Button,\n  Collapse,\n  Icon,\n} from '@chakra-ui/react';\nimport { WalletName, WalletReadyState } from '@solana/wallet-adapter-base';\nimport { useWallet, Wallet } from '@solana/wallet-adapter-react';\nimport { ChevronsDownUpIcon, ChevronsUpDownIcon } from 'lucide-react';\nimport { useWalletDialog } from './useWalletDialog';\nimport { WalletListItem } from './WalletListItem';\n\ninterface WalletDialogProps\n  extends Omit<ModalProps, 'title' | 'isOpen' | 'onClose' | 'children'> {\n  featuredWallets?: number;\n  title?: string;\n}\n\nexport const WalletDialog: FC<WalletDialogProps> = ({\n  title = 'Select Your Wallet',\n  featuredWallets = 3,\n  ...props\n}) => {\n  const { wallets, select } = useWallet();\n  const { isOpen, setOpen } = useWalletDialog();\n\n  const [expanded, setExpanded] = useState(false);\n\n  const [featured, more] = useMemo(() => {\n    const installed: Wallet[] = [];\n    const loadable: Wallet[] = [];\n    const notDetected: Wallet[] = [];\n\n    wallets.forEach((wallet) => {\n      if (wallet.readyState === WalletReadyState.NotDetected) {\n        notDetected.push(wallet);\n      } else if (wallet.readyState === WalletReadyState.Loadable) {\n        loadable.push(wallet);\n      } else if (wallet.readyState === WalletReadyState.Installed) {\n        installed.push(wallet);\n      }\n    });\n\n    const orderedWallets = [...installed, ...loadable, ...notDetected];\n    return [\n      orderedWallets.slice(0, featuredWallets),\n      orderedWallets.slice(featuredWallets),\n    ];\n  }, [wallets, featuredWallets]);\n\n  const handleWalletClick = useCallback(\n    (event: SyntheticEvent, walletName: WalletName) => {\n      select(walletName);\n      setOpen(false);\n    },\n    [select, setOpen]\n  );\n\n  const handleExpandClick = useCallback(\n    () => setExpanded(!expanded),\n    [setExpanded, expanded]\n  );\n\n  return (\n    <Modal isOpen={isOpen} onClose={() => setOpen(false)} {...props}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>{title}</ModalHeader>\n        <ModalBody>\n          <List>\n            {featured.map((wallet) => (\n              <WalletListItem\n                key={wallet.adapter.name}\n                onClick={(event) =>\n                  handleWalletClick(event, wallet.adapter.name)\n                }\n                wallet={wallet}\n              />\n            ))}\n            {more.length ? (\n              <>\n                <Collapse in={expanded} unmountOnExit>\n                  <List>\n                    {more.map((wallet) => (\n                      <WalletListItem\n                        key={wallet.adapter.name}\n                        onClick={(event) =>\n                          handleWalletClick(event, wallet.adapter.name)\n                        }\n                        wallet={wallet}\n                      />\n                    ))}\n                  </List>\n                </Collapse>\n                <ListItem>\n                  <Button onClick={handleExpandClick}>\n                    {expanded ? 'Less' : 'More'} options\n                    {expanded ? (\n                      <Icon as={ChevronsUpDownIcon} />\n                    ) : (\n                      <Icon as={ChevronsDownUpIcon} />\n                    )}\n                  </Button>\n                </ListItem>\n              </>\n            ) : null}\n          </List>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","// import { useDisclosure } from '@chakra-ui/react';\n\n// export const useWalletDialog = () => {\n//   const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n//     id: 'wallet-multi-modal',\n//   });\n\n//   return {\n//     isOpen,\n//     onOpen,\n//     onClose,\n//     onToggle,\n//   };\n// };\n\nimport { createContext, useContext } from 'react';\n\nexport interface WalletDialogContextState {\n  isOpen: boolean;\n  setOpen: (isOpen: boolean) => void;\n}\n\nexport const WalletDialogContext = createContext<WalletDialogContextState>({\n  isOpen: false,\n  setOpen: () => false,\n} as WalletDialogContextState);\n\nexport const useWalletDialog = (): WalletDialogContextState =>\n  useContext(WalletDialogContext);\n","import type { ListItemProps } from '@chakra-ui/react';\nimport { Button, ListItem } from '@chakra-ui/react';\nimport type { Wallet } from '@solana/wallet-adapter-react';\nimport type { FC, MouseEventHandler } from 'react';\nimport React from 'react';\nimport { WalletIcon } from './WalletIcon.js';\n\ninterface WalletListItemProps\n  extends Omit<ListItemProps, 'onClick' | 'button'> {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  wallet: Wallet;\n}\n\nexport const WalletListItem: FC<WalletListItemProps> = ({\n  onClick,\n  wallet,\n  ...props\n}) => (\n  <ListItem {...props} w=\"full\" h=\"16\">\n    <Button\n      onClick={onClick}\n      leftIcon={<WalletIcon wallet={wallet} />}\n      variant=\"ghost\"\n      w=\"full\"\n      justifyContent=\"start\"\n      rounded=\"none\"\n      py={2}\n      h=\"full\"\n    >\n      {wallet.adapter.name}\n    </Button>\n  </ListItem>\n);\n","import { Image } from '@chakra-ui/react';\nimport type { Wallet } from '@solana/wallet-adapter-react';\nimport type { DetailedHTMLProps, FC, ImgHTMLAttributes } from 'react';\nimport React from 'react';\n\nexport interface WalletIconProps\n  extends DetailedHTMLProps<\n    ImgHTMLAttributes<HTMLImageElement>,\n    HTMLImageElement\n  > {\n  wallet: Wallet | null;\n}\n\nexport const WalletIcon: FC<WalletIconProps> = ({ wallet, ...props }) =>\n  wallet && (\n    <Image\n      src={wallet.adapter.icon}\n      alt={`${wallet.adapter.name} icon`}\n      {...props}\n      h={8}\n      w={8}\n    />\n  );\n","import React, { useMemo } from 'react';\nimport {\n  Button,\n  ButtonProps,\n  Icon,\n  Menu,\n  MenuItem,\n  useDisclosure,\n} from '@chakra-ui/react';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { CopyIcon, LogOutIcon, ArrowLeftRight } from 'lucide-react';\nimport { WalletIcon } from './WalletIcon';\nimport { useWalletDialog } from './useWalletDialog';\n\nexport const WalletMultiButton = ({\n  children,\n  disabled,\n  ...props\n}: ButtonProps) => {\n  const { publicKey, wallet, connected, connecting, connect, disconnect } =\n    useWallet();\n\n  // const {\n  //   isOpen: isMenuOpen,\n  //   onOpen: onMenuOpen,\n  //   onClose: onMenuClose,\n  // } = useDisclosure();\n\n  const { setOpen } = useWalletDialog();\n\n  const base58 = useMemo(() => publicKey?.toBase58(), [publicKey]);\n\n  const content = useMemo(() => {\n    if (children) return children;\n    if (!wallet || !base58) return null;\n    return `${base58.slice(0, 4)}..${base58.slice(-4)}`;\n  }, [wallet, base58, children]);\n\n  if (!wallet) {\n    return (\n      <Button onClick={() => setOpen(true)} {...props}>\n        {children || 'Select Wallet'}\n      </Button>\n    );\n  }\n\n  const connectWalletContent = useMemo(() => {\n    if (children) return children;\n    if (connecting) return 'Connecting ...';\n    if (connected) return 'Connected';\n    if (wallet) return 'Connect';\n    return 'Connect Wallet';\n  }, [children, connecting, connected, wallet]);\n\n  if (!base58) {\n    return (\n      <Button\n        disabled={disabled || !wallet || connecting || connected}\n        leftIcon={<WalletIcon wallet={wallet} />}\n        onClick={() => connect().catch(() => {})}\n        {...props}\n      >\n        {connectWalletContent}\n      </Button>\n    );\n  }\n\n  return (\n    <>\n      <Button\n        {...props}\n        leftIcon={<WalletIcon wallet={wallet} />}\n        // onClick={onMenuOpen}\n      >\n        {content}\n      </Button>\n      {/* <Menu id=\"wallet-menu\" isOpen={isMenuOpen} onClose={onMenuClose}>\n        <MenuItem onClick={onMenuClose}>\n          <Button\n            startIcon={<WalletIcon wallet={wallet} />}\n            onClick={onMenuClose}\n            fullWidth\n            {...props}\n          >\n            {wallet.adapter.name}\n          </Button>\n        </MenuItem>\n        <MenuItem\n          onClick={async () => {\n            await navigator.clipboard.writeText(base58);\n          }}\n          icon={<Icon as={CopyIcon} />}\n        >\n          Copy address\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            setOpen(true);\n          }}\n          icon={<Icon as={ArrowLeftRight} />}\n        >\n          Change wallet\n        </MenuItem>\n        <MenuItem\n          onClick={() => {\n            // eslint-disable-next-line @typescript-eslint/no-empty-function\n            disconnect().catch(() => {\n              // Silently catch because any errors are caught by the context `onError` handler\n            });\n          }}\n          icon={<Icon as={LogOutIcon} />}\n        >\n          Disconnect\n        </MenuItem>\n      </Menu> */}\n    </>\n  );\n};\n","import React, { FC, ReactNode, useState } from 'react';\nimport { WalletDialogContext } from './useWalletDialog.js';\nimport { WalletDialog } from './WalletDialog.js';\n\nexport interface WalletDialogProviderProps {\n  children: ReactNode;\n}\n\nexport const WalletDialogProvider: FC<WalletDialogProviderProps> = ({\n  children,\n  ...props\n}) => {\n  const [isOpen, setOpen] = useState(false);\n\n  return (\n    <WalletDialogContext.Provider\n      // eslint-disable-next-line react/jsx-no-constructed-context-values\n      value={{\n        isOpen,\n        setOpen,\n      }}\n    >\n      {children}\n      <WalletDialog {...props} />\n    </WalletDialogContext.Provider>\n  );\n};\n"]}